###This is a guide to make clean images of 12M + 7M + TP ALMA data from a sample of sources of the TROOPICAL project.
###Some information has to be obtained manually for each source or molecular line, and the rest is standard.
###In order words, modifications to the code will be required to use this code on other datasets.
###All of the following commands are to be executed in CASA.

#Libraries:
import glob

#List of source names:
srcs= ['HOPS-156','HOPS-163','HOPS-30','HOPS-160','HOPS-140','HOPS-139','HOPS-189','HOPS-193','HOPS-29','HOPS-145','HOPS-17','HOPS-18','HOPS-71','HOPS-43','HOPS-133']

#Gather the .ms files from the 12M dataset and split them by source name (THIS STEP IS DONE ONLY ONCE):
#This assumes you run the following commands from the directory where the 12m, self-calibrated, continuum-subtracted (*targets.contsub.ms) files are located. 
vlist12m= glob.glob('*targets.contsub.ms')

#You can check the spw numbers for your data by looking at one of the *targets.contsub.ms files with the LISTOBS command.
#We take into account that the VIS parameter in SPLIT does not take a list as an input.
#And you need to update the paths for where you want to store the splitted .ms files.
for i in srcs:
    for j in vlist12m:
        split(vis=j,outputvis='12M_SPLIT/'+i+'_'+j+'_12m.ms',spw='25,27,29,31,33,35,37,39,41,43',field=i,datacolumn='data',keepflags=False)

#Gather the .ms files from the 7M dataset and split them by source name (THIS STEP IS DONE ONLY ONCE):
#This assumes you run the following commands from the directory where the 7m, self-calibrated, continuum-subtracted (*targets.contsub.ms) files are located. 
vlist7m= glob.glob('*targets.contsub.ms')

#You can check the spw numbers for your data by looking at one of the *targets.contsub.ms files with the LISTOBS command.
#We take into account that the VIS parameter in SPLIT does not take a list as an input.
#And you need to update the paths for where you want to store the splitted .ms files.
for i in srcs:
    for j in vlist7m:
        split(vis=j,outputvis='7M_SPLIT/'+i+'_'+j+'_7m.ms',spw='16,18,20,22,24,26,28,30,32,34',field=i,datacolumn='data',keepflags=False)

#Source coordinates, following the same order as the list with the source names (above):
#Notice the format of the Dec values...
coords= ['ICRS 05:38:03.4080 -06.58.15.959','ICRS 05:37:17.2799 -06.36.18.360','ICRS 05:34:44.0640 -05.41.25.800','ICRS 05:37:51.0480 -06.47.20.399','ICRS 05:38:46.2720 -07.01.53.400','ICRS 05:38:49.6080 -07.01.17.760','ICRS 05:35:30.8879 -06.26.31.919','ICRS 05:36:30.2639 -06.01.17.399','ICRS 05:34:49.0560 -05.41.42.000','ICRS 05:38:43.8479 -07.01.13.079','ICRS 05:35:07.1759 -05.52.05.879','ICRS 05:35:05.4960 -05.51.54.359','ICRS 05:35:25.6080 -05.07.57.360','ICRS 05:35:04.5119 -05.35.14.279','ICRS 05:39:05.8319 -07.10.39.359']

#Spectral window numbers for both the 12M & 7M data (after splitting the data with the SPLIT command in CASA):
spws= ['0','1','2','3','4','5','6','7','8','9']

#Spectral line names:
lines= ['shift-H2CO-9-9', 'shift-H2CO-3-2', 'CH3OH-5-4', 'H2CO', 'C18O', '13CO', 'CH3OH-3-4', 'CO', 'N2Dp', 'Cont']

#Rest frequencies for each line, following the same order as the list with the spectral line names (above):
restfreqs= ['216.583500GHz','218.458500GHz','216.945600GHz','218.222192GHz','219.560358GHz','220.398684GHz','230.027060GHz','230.538000GHz','231.321828GHz','232.980000GHz']

#Dictionaries to store the filenames for the 12M & 7M data corresponding to each source name:
srcandms12= {}
srcandms7= {}

#You need to update the paths (below) to where the files are (the self-calibrated .ms files):
for i in srcs:
      srcandms12[i]= glob.glob('12M_SPLIT/'+i+'_*.ms')
      srcandms7[i]= glob.glob('7M_SPLIT/'+i+'_*.ms')

#Make dirty images of the 12M & 7M data, to find an appropriate START and NCHAN value for both the 12M + 7M data (using CARTA):
#This example is just for the 12CO line; for the other lines you need to change the values of SPW and RESTFREQ (below), or use the list that have these values (defined above) and incorporate them into the loop 

spw= spws[7] #For 12CO
restfreq= restfreqs[7] #For 12CO

imsize12= 450
imsize7= 120

cell12= '0.16arcsec' 
cell7= '0.89arcsec'

nchan= -1
start= ''
width= ''

index= 0 #because I'm lazy and the coords variable (above) is a list...

for i in srcs:

    vis12= srcandms12[i]
    vis7= srcandms7[i]

    #You need to update the paths to where you want to store the images
    prename12= '12M_SPLIT/DIRTY_IMAGES/'+i+'_CO_cube'
    prename7= '7M_SPLIT/DIRTY_IMAGES/'+i+'_CO_cube'

    #Source coordinates
    phasecenter= coords[index]

    #Make 12M dirty images for all sources
    tclean(vis=vis12,imagename=prename12 + '_dirty',gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize12,cell=cell12,spw=spw,weighting='briggsbwtaper',robust=0.5,phasecenter=phasecenter,specmode='cube',width=width,start=start,nchan=nchan,restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mask='',niter=0,interactive=False)

    #Make 7M dirty images for all sources
    tclean(vis=vis7,imagename=prename7 + '_dirty',gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize7,cell=cell7,spw=spw,weighting='briggsbwtaper',robust=0.5,phasecenter=phasecenter,specmode='cube',width=width,start=start,nchan=nchan,restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mask='',niter=0,interactive=False)

    index += 1

#In the next step you have two options: 

#OPTION #1: You can look with CARTA at the 12M and 7M dirty images to find an appropriate START and NCHAN value for both datasets; this is not the only way (and maybe not the most efficient way) to do it; or

#OPTION #2: Using the following CASA commands one can iteretaively find the image parameters using IMHEAD in GET mode and use them to determine an appropriate START and NCHANvalue for both datasets, which is done below:

#Gather the corresponding images for all sources (assuming that the 12M images have a "smaller" frequency coverange than the 7M images...)
images= glob.glob('12M_SPLIT/DIRTY_IMAGES/HOPS-*_CO_cube_dirty.image')

nchan=[]
chan_width=[]
f0=[]
ff=[]
fmin=0
fmax=0

for i in range(0,len(images)):
    nchan.append(imhead(images[i],mode='get',hdkey='shape')[3])
    f0.append(imhead(images[i],mode='get',hdkey='crval4')['value'])             #This gives a dictionary, from which you get the frequency of CH0 ('value' column in Hz)
    chan_width.append(imhead(images[i],mode='get',hdkey='cdelt4')['value'])     #This also gives a dictionary, from which you get the channel width ('value' column in Hz)
    ff.append(f0[i]+chan_width[i]*(nchan[i]-1))                                 #Calculate the frequency of the last channel

chan_cut=10                                                                     #Define the amount of channels we want to cut from both ends (this can be changed)

#Check if 'cdelt4' (the channel width) is positive or negative, since the sign determines if you will move along the channels in the spw from left to right or viceversa
if chan_width[0]>0:                                                #If cdelt4 (width of channel) is positive, the starting frequency from the file will be the leftmost frequency
    fmax=min(ff)                                                   #Look for the highest frequency from all the files to determine where to find our START
    fmin=max(f0)                                                   #Look for the lowest frequency from all the files to determine NCHAN and not overshoot or include noisy channels
    iff=ff.index(fmax)                                             #Determine the index of the source we are using for reference as ending frequency
    if0=f0.index(fmin)                                             #Determine the index of the source we are using for reference as starting frequency
    Tminf=fmin+chan_width[if0]*chan_cut                            #Calculate where we are truncating (cutting) the channels for the starting frequency
    Tmaxf=fmax-chan_width[iff]*chan_cut                            #Calculate where we are truncating (cutting) the channels for the ending frequency
    chans=(Tmaxf-Tminf)//chan_width[if0]                           #Calculate the number of channels between the starting and ending frequency
    print(f'Suggested START Value in MHz: {Tminf/(1e6)}')          #Output a message with the suggested START in MHz
    print(f'Suggested NCHAN: {chans+1}')                           #Outputs a message with the suggested NCHAN, taking into account that the channel indexing starts in 0...
elif chan_width[0]<0:                                              #If 'cdelt4' is positive, the starting frequency from the file will be the rightmost frequency
    fmax=min(f0)                                                   #Look for the lowest frequency from all the files to (which will be the ending frequency) to determine nchan and not overshoot or include noisy channels
    fmin=max(ff)                                                   #Look for the highest frequency from all the files to determine the starting frequency
    iff=ff.index(fmin)                                             #Determine the index of the source we are using for reference as starting frequency
    if0=f0.index(fmax)                                             #Determine the index of the source we are using for reference as ending frequency
    Tminf=fmax+chan_width[if0]*chan_cut                            #The fmin and fmax are switched in the equation when the channel width is negative
    Tmaxf=fmin-chan_width[iff]*chan_cut
    chans=(Tmaxf-Tminf)//chan_width[iff]
    print(f'Suggested START Value in MHz: {Tminf/(1e6)}')
    print(f'Suggested NCHAN: {chans+1}')


#Make the combined 12M + 7M dirty images using the START and NCHAN values obtained from one of the options in the previous step:

imsize= 450 #Do not change this value
cell= '0.16arcsec' #Do not change this value
width= '' #Do not change this value

#This example is for 12CO:
start= '-67km/s' #For 12CO
nchan= 950 #For 12CO

index= 0 #Again...

for i in srcs:
    vis= srcandms12[i] + srcandms7[i] #list of .ms files
    prename= 'DIRTY_IMAGES/'+i+'_CO_combine_cube' #You need to update the path here
   
    phasecenter= coords[index] #source coordinates

    #Make 12M + 7M dirty images for all sources
    tclean(vis=vis,imagename=prename + '_dirty',gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize,cell=cell,spw=spw,weighting='briggsbwtaper',robust=0.5,phasecenter=phasecenter,specmode='cube',width=width,start=start,nchan=nchan,restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mask='',niter=0,interactive=False)

    index += 1

#Now, there are two options to find the appropriate THRESHOLD value that's going to be used to make the clean combined image:

#Option 1: In CARTA, you can place a 20arcsec x 20arcsec square at the center of your dirty 12M + 7M image and measure the rms in 2 line-free channels (e.g., ch=100 & ch=800), so you can use the average as your rms threshold for tclean
#If you are not going to clean the whole cube, you can also use CARTA at this moment to select the START and NCHAN values for tclean

#Example for 12CO, and the corresponding START and NCHAN values determined with CARTA (using Option 1):
#If you are going to clean the whole cube, you can use the same START and NCHAN values used for the 12M + 7M dirty image (above)
#So you have to choose: save time by not having to look at each dirty image to find where to 'cut' the cube and then spend more time cleaning, or
#reduce the cleaning time by just cleaning the 'interesting' part of the cube, which you can find by looking at the dirty image in CARTA... I choose the latter
 
vmin= [-12,-12,-15,-25,-12,-30,-12,-4,-12,-12,-42,-55,-5,-12,-12] #km/s
chan= [200,200,370,350,250,450,260,320,280,200,420,500,500,240,200] #chans

#Option 2: You can look at the weblog of the 12M data and get the theoretical rms value from here 
#Go to the /html directory inside the weblog directory, and run the following command in the terminal
#python3 -m http.server 8080 --bind localhost
#Then, on your browser enter the following:
#http://localhost:8080
#Click the 'By Task' tab on top, and in the step named 'hif_makeimages: Make target cubes' you will find 
#the theoretical sensitivities for each source and spw

#Here, we will use Option 2 for determining the rms threshold:
#This are the 'final' (average) theoretical values selected from the 15 sources above
#Each value in the list corresponds to each of the corresponding spectral lines:
#'shift-H2CO-9-9', 'shift-H2CO-3-2', 'CH3OH-5-4', 'H2CO', 'C18O', '13CO', 'CH3OH-3-4', 'CO', 'N2Dp', 'Cont'

rms_weblog= [6.7e-3, 5.6e-3, 6.1e-3, 5.4e-3, 8.1e-3, 9.9e-3, 7.7e-3, 7.0e-3, 8.5e-3, 2.3e-3] #Jy/beam

#Important tlcean parameters (DO NOT CHANGE):
noisethresh= 1.0     #mask threshold based on the noise level
minbeamfrac= 0.3     #minimum beam fraction in size to prune masks smaller than mimbeamfrac * beam
sidelobethresh= 0.5  #mask threshold based on sidelobe levels
lownoisethresh= 0.5  #mask threshold to grow previously masked regions via binary dilation
negativethresh= 0.0  #mask threshold for negative features
niter= 100000000
imsize= 450
cell= '0.16arcsec'
width= ''

#Make 12M + 7M clean images for all sources

index = 0

for i in srcs:
    vis = srcandms12[i] + srcandms7[i] #srcandms12 & srcandms7 where previously defined (above)
    prename= 'CLEAN_IMAGES/'+i+'_CO_combine_cube_2rms'  #Example for 12CO; you need to update de name for other molecular lines
    phasecenter = coords[index] #previously defined
    nchan = chan[index]
    start = str(vmin[index])+'km/s'
    rms = rms_weblog[7] #For 12CO  #This value does not change per source, so it can be taken out of the FOR loop

    #We are going to clean down to 2 * rms
    tclean(vis=vis,imagename=prename,gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize,cell=cell,spw=spw,weighting='briggsbwtaper',robust=0.5,phasecenter=phasecenter,specmode='cube',width=width,start=start,nchan=nchan,restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mosweight=True,niter=niter,usemask='auto-multithresh',threshold=str(2.0*rms)+'Jy/beam',sidelobethreshold=sidelobethresh,noisethreshold=noisethresh,lownoisethreshold=lownoisethresh,minbeamfrac=minbeamfrac,growiterations=75,negativethreshold=negativethresh,interpolation='linear',cyclefactor = 2,interactive=False,pbcor=True,verbose=True)

    index += 1

########## End of cleaning ##########

#Now, we have to combine the 12M+7M clean image with the TP data; we are going to use the FEATHER task to do this
#The steps are as follows:
#1. Convert the single-dish (TP) fits file into a CASA image (.im) --> importfits
#2. Check (and if neccesary modify) that the restreqs of both images (BL and TP) are the same --> imhead (and imreframe)
#3. Regrid the TP image to match the shape of the the BL image (using the bl image as template) --> imregrid
#4. Re-order the TP axes to match the BL axes --> imtrans
#5. Multiply the TP image by the Primary Beam (PB) BL image, so they both have a common (beam) response on the sky --> immath
#6. Combine the BL and TP images --> feather
#7. Divide the combined image by the PB image, to correct the primary beam response for the image --> immath

#SPW numbers for the TP data
spw= ['spw17','spw19','spw21','spw23','spw25','spw27','spw29','spw31','spw33','spw35'] #31 is for 12CO

#We are using the products created by the ALMA pipeline for the the TP data (the files that end with *.cube.I.sd.fits)

#Gather the TP files for all the sources
srcandfits= {}

#This next step (the two nested for-loops) has to be done only once, and the code assumes your are running CASA from the directory where the TP data is located (in my case, the directory is called TP_ALL)
for i in srcs:
    #You have to modify the beggining of the filename (below) when needed
    srcandfits[i] = glob.glob('member.uid___A001_X335d_X376*'+i+'*.cube.I.sd.fits') 

    for j in srcandfits[i]:
        tpfits= j
        tpim= 'CONVERTED/'+i+'_'+j+'.im' #Assumes the CONVERTED directory has already been created

        importfits(fitsimage=tpfits, imagename=tpim)

#The following code assumes you are running CASA from the directory where the two directories for the clean 12M+7M and the TP converted files are (respectively) located

bldir= 'CLEAN_IMAGES/'
tpdir= 'TP_ALL/CONVERTED/'

#The following is an example for the 12CO line; you need to modify some parts of the code accordingly for the other spectral lines

for i in srcs:  #srcs was previously defined
    #Check that rest frequencies are identical
    print(i)
    
    #For CO, which is spw31
    print(imhead(bldir+i+'_CO_combine_cube_2rms.image',mode='get',hdkey='restfreq'))
    print(imhead(tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im',mode='get',hdkey='restfreq'))

#If the rest frequencies are not the same and you have to reframe the TP image, you will use the following code: 
#This is an example for 12CO
restfreq= '230.538000GHz'

for i in srcs:
    tpim=tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im'
    imreframe(imagename=tpim, output=tpim+'.reframe', restfreq=restfreq)

#Regrid the TP image for CO and spw31 (must modifiy for other lines or different filenames, e.g., if the images were reframed)
for i in srcs:
    tpim=tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im'
    imregrid(imagename=tpim, template=bldir+i+'_CO_combine_cube_2rms.image', axes=[0, 1, 2, 3], output=tpim+'.regrid')

#Swap the stokes and frequency axes in the TP image (CO/spw31) to match the BL image
for i in srcs:
    imtrans(imagename=tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im.regrid', outfile=tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im.regrid.imt', order='0132')

#Multiply the TP image (.imt) by the BL primary beam (.pb)

fdir= 'FEATHER/' #New directory to separate the final TP images from the previous versions

for i in srcs:
    #Example for 12CO
    immath(imagename=[tpdir+i+'_member.uid___A001_X335d_X376.'+i+'_sci.spw31.cube.I.sd.fits.im.regrid.imt', bldir+i+'_CO_combine_cube_2rms.pb'], expr='IM0*IM1', outfile=fdir+i+'_TP_CO.regrid.imt.depb')

##You get a warning like: WARN  ImageExprCalculator::compute image units are not the same: 'Jy/beam' vs ''. Ignore it.

#Feather BL (12M+7M) and TP images

fim= 'FEATHER/IMAGES/' #New directory to store the final feathered images

for i in srcs:
    #For 12CO
    feather(imagename= fim+i+'_feather_CO.image', highres= bldir+i+'_CO_combine_cube_chen2rms.image', lowres=fdir+i+'_TP_CO.regrid.imt.depb', sdfactor= 1.0)

##You get a warning: WARN  feather::ImageRegrid::regrid   You are regridding an image whose beam is not well sampled by the pixel size... We think we can ignore that.

#Divide feathered image by .pb image
for i in srcs:
    immath(imagename= [fim+i+'_feather_CO.image', bldir+i+'_CO_combine_cube.pb'], expr= 'IM0/IM1', outfile= fim+i+'_feather_CO.image.pbcor')

###If you want/need to, you can change the size of the image relative to the primary beam coverage (our default is pbmask= 0.2) using the IMSUBIMAGE task:
#Example for the 12CO line, and a mask > 0.4 (i.e., changing the image by using a mask constructed at the 0.4 pb gain level) 

for i in srcs:
    imsubimage(imagename= fim+i+'_feather_CO.image.pbcor', outfile= fim+i+'_feather_CO.image.pbcor.pb0p4', mask=f'"CLEAN_IMAGES/{i}_CO_combine_cube_chen2rms.pb">0.4')
    #Notice how the MASK parameter is written using the f'' command, in order to be able to run it in a loop...

#Create .fits files of the .pbcor images
for i in srcs:
    #Assuming the FITS directory has been previously created
    exportfits(imagename= fim+i+'_feather_CO.image.pbcor', fitsimage= fim+'FITS/'+i+'_feather_CO.image.pbcor.fits',dropstokes= True, velocity= True)

########## End of Feathering ##########

#Continuum imaging of 12M + 7M data: 

#Libraries:
import glob

#List of source names:
srcs= ['HOPS-156','HOPS-163','HOPS-30','HOPS-160','HOPS-140','HOPS-139','HOPS-189','HOPS-193','HOPS-29','HOPS-145','HOPS-17','HOPS-18','HOPS-71','HOPS-43','HOPS-133']

#Gather the .ms files for the 12M and 7M datasets:
#You need to update the paths (below) to where the *targets.selfcal.ms files are
vlist12m= glob.glob('12M_FILES_FOR_SELFCAL/*targets.selfcal.ms')
vlist7m= glob.glob('7M_FILES_FOR_SELFCAL/*targets.selfcal.ms')

##The *_targets.selfcal.ms (in the commands above) are spectrally averaged continuum used for self-calibration, and can be used to to the continuum imaging much easier

#Split the continuum .ms files by source name (THIS STEP IS DONE ONLY ONCE):
#We take into account that VIS parameter in SPLIT does not take a list as an input):
#You can check the spw numbers for your data by looking at one of the *targets.selfcal.ms files with the LISTOBS command
#And you need to update the paths for where you want to store the splitted continuum .ms files

for i in srcs:
    for j in vlist12m:
        split(vis=j,outputvis='../12M_CONT_SPLIT/'+i+'_'+j+'_12m.ms',spw='25,27,29,31,33,35,37,39,41,43',field=i,datacolumn='data',keepflags=False)

for i in srcs:
    for j in vlist7m:
        split(vis=j,outputvis='../7M_CONT_SPLIT/'+i+'_'+j+'_7m.ms',spw='16,18,20,22,24,26,28,30,32,34',field=i,datacolumn='data',keepflags=False)

#Source coordinates, following the same order as the list with the source names (above):
#Notice the format of the Dec values...
coords= ['ICRS 05:38:03.4080 -06.58.15.959','ICRS 05:37:17.2799 -06.36.18.360','ICRS 05:34:44.0640 -05.41.25.800','ICRS 05:37:51.0480 -06.47.20.399','ICRS 05:38:46.2720 -07.01.53.400','ICRS 05:38:49.6080 -07.01.17.760','ICRS 05:35:30.8879 -06.26.31.919','ICRS 05:36:30.2639 -06.01.17.399','ICRS 05:34:49.0560 -05.41.42.000','ICRS 05:38:43.8479 -07.01.13.079','ICRS 05:35:07.1759 -05.52.05.879','ICRS 05:35:05.4960 -05.51.54.359','ICRS 05:35:25.6080 -05.07.57.360','ICRS 05:35:04.5119 -05.35.14.279','ICRS 05:39:05.8319 -07.10.39.359']

#restfreqs= ['216.583500GHz','218.458500GHz','216.945600GHz','218.222192GHz','219.560358GHz','220.398684GHz','230.027060GHz','230.538000GHz','231.321828GHz','232.980000GHz']

restfreq='224.78175GHz' #Same for all continuum images, since for each source you are going to be using all the line-free channels of all the spws:
#restfreq= (restfreqsMin + restfreqsMax) / 2, where the minimum and maximum frequencies are taken from the restfreqs list (above)

#Dictionaries to store the filenames for the 12M & 7M data corresponding to each source name:
srcandms12= {}
srcandms7= {} 

#You need to update the paths (below) to where the files are (the selfcal .ms files):
for i in srcs:
    srcandms12[i] = glob.glob('12M_CONT_SPLIT/'+i+'_*.ms')

for i in srcs:
    srcandms7[i] = glob.glob('7M_CONT_SPLIT/'+i+'_*.ms')

#Make the combined 12M + 7M dirty continuum images:

imsize= 450 #Do not change this value
cell= '0.16arcsec' #Do not change this value
width= '' #Do not change this value

index= 0

for i in srcs:
     prename= 'DIRTY_IMAGES/'+i+'_continuum_ctrfreq' #You need to update the path to where you want to store the images

     vis= srcandms12[i] + srcandms7[i]
     phasecenter= coords[index]

     tclean(vis=vis,imagename=prename + '_dirty_briggs',gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize,cell=cell,spw='',weighting='briggs',robust=0.5,phasecenter=phasecenter,specmode='mfs',restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mask='',niter=0,interactive=False)

     index += 1

#To find the appropriate THRESHOLD value that's going to be used to make the clean combined continuum images, you can look at the dirty images with CARTA, draw a square on an area in each image, big enough to have a good amount of pixels (e.g., ~10^3 pixels), but small enough that you can avoid pixels with 'significant' emission and pixels with negative-values as well.

#srcs=['HOPS-156','HOPS-163','HOPS-30','HOPS-160','HOPS-140','HOPS-139','HOPS-189','HOPS-193','HOPS-29','HOPS-145','HOPS-17','HOPS-18','HOPS-71','HOPS-43','HOPS-133']

#This are the RMS values, measured from the dirty comibined continuum images, as indicated above (and this list follows the order of the sources in srcs):
thresh= [7.2e-5, 2.2e-4, 2.5e-4, 9.5e-5, 3.2e-4, 9.6e-5, 2.1e-4, 1.4e-4, 2.0e-4, 2.8e-4, 2.8e-4, 3.5e-4, 5.5e-4, 9.5e-5, 1.2e-4] #Jy/beam 

#Make the clean continuum images:

#Important tlcean parameters (DO NOT CHANGE):
noisethresh = 1.0
minbeamfrac = 0.3
sidelobethresh = 0.5
lownoisethresh = 0.5
negativethresh = 0.0
niter = 100000000

index= 0

for i in srcs:
     prename= 'CLEAN_IMAGES/CONTINUUM/'+i+'_combine_continuum_chen1rms' #You need to update the path to where you want to store the images 
     vis= srcandms12[i] + srcandms7[i]
     phasecenter= coords[index]
     rms = thresh[index]

     #For continuum imaging, we are going to clean down to 1 * rms, 
     #using 'natural' weighting in order to recover as much as possible of the extended continuum emission
     tclean(vis=vis,imagename=prename,gridder='mosaic',deconvolver='hogbom',pbmask=0.2,imsize=imsize,cell=cell,spw='',weighting='natural',robust=0.5,phasecenter=phasecenter,specmode='mfs',restfreq=restfreq,outframe='LSRK',veltype='radio',restoringbeam='common',mosweight=True,niter=niter,usemask='auto-multithresh',threshold=str(1.0*rms)+'Jy/beam',sidelobethreshold=sidelobethresh,noisethreshold=noisethresh,lownoisethreshold=lownoisethresh,minbeamfrac=minbeamfrac,growiterations=75,negativethreshold=negativethresh,interpolation='linear',cyclefactor=2,interactive=False,pbcor=True,verbose=True)

     index += 1

#Create .fits files of the .pbcor images
for i in srcs:
    #Assuming the FITS directory has been previously created
    exportfits(imagename= i+'_combine_continuum_chen1rms.image.pbcor', fitsimage= 'FITS/'+i+'_combine_continuum_chen1rms.image.pbcor.fits',dropstokes= True, velocity= True)

########## End of continuum imaging ##########

